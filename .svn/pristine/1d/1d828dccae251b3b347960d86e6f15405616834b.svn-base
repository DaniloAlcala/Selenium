package com.indra.pjsf.regresion;

import org.junit.Assert;
import org.junit.FixMethodOrder;
import org.junit.Test;
//import org.junit.Ignore;
import org.junit.runners.MethodSorters;

import com.indra.pjsf.pruebas.TestBase.msjResultado;
import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba;
import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba.entidades;
import com.indra.pjsf.tf.paginas.PgnFichaExpediente;
import com.indra.pjsf.tf.paginas.PgnMovimientoInterno;
import com.indra.pjsf.tf.paginas.PgnPrestamoProfesional;
import com.indra.pjsf.tf.workflows.RegresionExpedientes;
import com.indra.pjsf.tf.workflows.RegresionExpedientes.campo;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class ExpedientesLotesPrestamo_NF extends RegresionTestBase {

	@Test
	public void A_GE_003_205_Prestamo_Lote_Expediente_Obligatorio(){
		
		codigo = "GE-003.205";
		prepararDatos(entidades.Expedientes); 
		
		PgnPrestamoProfesional.IrDesdePrincipal();
		//PgnPrestamoProfesional.Ir(); 
		PgnPrestamoProfesional.prestamoLoteExpedienteObligatorio(); //

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnMovimientoInterno.verificarMovInternoLoteExpObligatorio()); // Se puede usar el de mov interno porque es el mismo assert.
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}
	
	@Test
	public void A_GE_003_206_Prestamo_Lote_Profesional_Obligatorio(){
		
		codigo = "GE-003.206";
		prepararDatos(entidades.Expedientes); 
		
		//PgnPrestamoProfesional.IrDesdePrincipal(); 
		PgnPrestamoProfesional.Ir();
		PgnPrestamoProfesional.prestamoLoteProfesionalObligatorio(); //

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnPrestamoProfesional.verificarPrestamoLoteProfesionalObligatorio());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}
	
	
	@Test
	public void A_GE_003_207_Prestamo_Lote_Expediente_Siguiente_Obligatorio(){
		
		codigo = "GE-003.207";
		prepararDatos(entidades.Expedientes); 
		
		//PgnPrestamoProfesional.IrDesdePrincipal(); 
		PgnPrestamoProfesional.Ir();
		PgnPrestamoProfesional.prestamoProfesionalLoteSiguienteObligatorio(); 

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnMovimientoInterno.verificarMovInternoLoteExpObligatorio()); // Se puede usar el de mov interno porque es el mismo assert.
			resultado = true;
			// Si la prueba está OK se creó un movimiento para el CUIJ de la prueba, lo anulamos
			PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getCUIJ());
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

	@Test
	public void A_GE_003_208_Prestamo_Lote_Codbarras_Incompatible(){
		
		codigo = "GE-003.208";
		prepararDatos(entidades.Expedientes); 
		
		//PgnPrestamoProfesional.IrDesdePrincipal();
		PgnPrestamoProfesional.Ir();
		PgnPrestamoProfesional.prestamoProfesionalLoteCodbarrasIncompatible(); 

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnMovimientoInterno.verificarDatoIndividual(campo.CodigoBarras.toString(), 
							RegresionExpedientes.valorNoNumerico)); // Usamos el verificarDatoIndividual de Movimiento Interno
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

	@Test
	public void A_GE_003_209_Prestamo_Lote_Fojas_Incompatible(){
		
		codigo = "GE-003.209";
		prepararDatos(entidades.Expedientes); 
		
		PgnPrestamoProfesional.Ir();
		//PgnPrestamoProfesional.IrDesdePrincipal(); 
		PgnPrestamoProfesional.prestamoProfesionalLoteFojasIncompatible(); 

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnPrestamoProfesional.verificarPrestamoProfesionalLoteFojasIncompatible());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
			
	}
	
	@Test
	public void A_GE_003_210_Prestamo_Lote_Cuerpos_Incompatible(){
		
		codigo = "GE-003.210";
		prepararDatos(entidades.Expedientes); 
		
		PgnPrestamoProfesional.Ir(); 
		//PgnPrestamoProfesional.IrDesdePrincipal(); 
		PgnPrestamoProfesional.prestamoProfesionalLoteCuerposIncompatible(); //

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnPrestamoProfesional.verificarPrestamoProfesionalLoteCuerposIncompatible());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

	@Test
	public void A_GE_003_211_Prestamo_Lote_Fecha_Agenda_Incompatible(){
		
		codigo = "GE-003.211";
		prepararDatos(entidades.Expedientes); 
		
		//PgnPrestamoProfesional.IrDesdePrincipal(); 
		PgnPrestamoProfesional.Ir();
		PgnPrestamoProfesional.prestamoProfesionalLoteAgendaIncompatible(); //

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnPrestamoProfesional.verificarPrestamoProfesionalLoteAgendaIncompatible());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

}
