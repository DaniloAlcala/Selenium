package com.indra.pjsf.tf;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;

import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba;
import com.indra.pjsf.tf.navegacion.MESA_MenuSGE;
import com.indra.pjsf.tf.paginas.MESA_PgnIngreso;

//import org.openqa.selenium.firefox.FirefoxDriver;

public class MESA_Driver {

	
	public static WebDriver Instance;
			
	public static void Iniciar()
	{
		Instance = new ChromeDriver();
		Instance.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
			
		MESA_PgnIngreso.Ir();
		MESA_PgnIngreso.MESA_IngresarComo(GestorDeDatosDePrueba.Ejecucion.getMESAUsuario())
			.ConPassword(GestorDeDatosDePrueba.Ejecucion.getMESAContrasena())
			.Login();
		Instance.manage().window().maximize();

	}

	public static void CerrarSesion(){
    	
    	MESA_MenuSGE.CerrarSesion();
    }
	
    public static void Cerrar() {
		Instance.close();
		
	}
	
	
	public static void EsperarRefreshed(By locator) {
		
		AnularImplicitWait();
		
		Wait<WebDriver> wait = CrearFluentWait();
		wait.until(ExpectedConditions.stalenessOf(
				Instance.findElement(locator)));
		
		wait.until(ExpectedConditions.refreshed(
				ExpectedConditions.visibilityOfElementLocated(locator)));

		RestaurarImplicitWait();
	}

	public static void EsperarDisponible(By locator) {
		
		AnularImplicitWait();
		
		Wait<WebDriver> wait = CrearFluentWait();
		wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
		
		RestaurarImplicitWait();
	}
	
	public static void EsperarSoloRefreshed(By locator) {
		
		AnularImplicitWait();
		
		Wait<WebDriver> wait = CrearFluentWait();
		wait.until(ExpectedConditions.refreshed(
				ExpectedConditions.visibilityOfElementLocated(locator)));
		
		RestaurarImplicitWait();
	}


	private static Wait<WebDriver> CrearFluentWait() {
		Wait<WebDriver> wait = new FluentWait<WebDriver>(Instance)
				.withTimeout(60, TimeUnit.SECONDS)
				.pollingEvery(1, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class);
		return wait;
	}
	
	private static void RestaurarImplicitWait(){
		Instance.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
	}
	
	private static void AnularImplicitWait(){
		Instance.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
	}

}