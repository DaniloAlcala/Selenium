package com.indra.pjsf.tf.workflows;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.indra.pjsf.tf.Driver;
import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba;
import com.indra.pjsf.tf.datos.GestorDeDatosTestigo;

public class RegresionActuaciones extends GestorBase {
	

	public static String modeloObligatorio = "Debe seleccionar un modelo.";
	public static String modeloIncompatible = "No hay modelos.";
	public static String expedienteUbicacionExterna = "El expediente no se encuentra actualmente en el organismo";
	public static String actuacionFirmadaFechaPosterior = "La fecha de firma no puede ser mayor que la fecha actual.";
	public static String eliminarActuacionFirmada = "La actuación se encuentra Firmada o Parcialmente Firmada, no es posible eliminarla.";
	public static String editarActuacionExtractoVacio = "Debe indicar el extracto de la actuación";
	public static String protocolizarActuacion = "Ficha de Protocolización: de 'SENT. ACLARATORIA'";
	public static String valorNoNumerico = "no es un número.";
	public static String resolucionCero = "El nro. de Resolución no puede ser 0.";
	public static String resolucionDuplicada1 = "El nro. de Resolución";
	public static String resolucionDuplicada2 = "está siendo utilizado en el tomo";
	public static String resolucionFueraRango = "La fecha de firma de la actuación se encuentra fuera del rango de fechas del protocolo";
	public static String firmarActuaciones = "Movimiento de Expedientes – Firma de Actuaciones";
	public static String debeSeleccionarUnValor = "Se debe seleccionar un valor.";
	public static String fechaInvalida = "no es una fecha válida. Ejemplo válido";
	public static String actuacionesFirmadasFechaPosterior = "La Fecha de Firma no puede ser superior a la fecha actual.";
	public static String expedienteObligatorio = "Debe seleccionar un expediente.";
	public static String fechaPosterior = "La fecha de creación de la actuación no puede ser mayor que la fecha actual.";
	public static String fechaVencimientoAnterior = "La fecha de vencimiento no puede ser menor que la fecha actual";
	public static String fechaIncompatible = "No es una fecha";
	public static String horaIncompatible = "La hora debe tener el formato HH:mm";
	
	public static enum campo {
		CUIJ,
		SegundoCUIJ,
		Observaciones,
		FechaActual,
		Modelo,
		FechaFirma,
		Folio,
		Resolucion,
		FechaMovimiento
	}
	
	
	public static void crearSentenciaSinModelo() {
		
		if (GestorDeDatosTestigo.getControlCantRowsOrigen() == 0)
		{
			GestorDeActuaciones.buscarActuaciones();
			List<WebElement> allRows = obtenerFilasTotalesAct();
			GestorDeDatosTestigo.setControlCantRowsOrigen(allRows.size());
		}
		
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();

		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
			
	}

	public static boolean verificarSentenciaSinModelo() {
		boolean blnVerificado = false;
				
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.modeloObligatorio))
				//.contains("Debe seleccionar un modelo"))
				
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "Controla correctamente obligatoriedad de modelo");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "NO controla correctamente obligatoriedad de modelo");
		
		
		return blnVerificado;
	}

	public static void crearSentenciaModeloIncompatible() {
		
		if (GestorDeDatosTestigo.getControlCantRowsOrigen() ==0)
		{
			GestorDeActuaciones.buscarActuaciones();
			List<WebElement> allRows = obtenerFilasTotalesAct();
			GestorDeDatosTestigo.setControlCantRowsOrigen(allRows.size());
		}
		
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
			
	}

	public static boolean verificarSentenciaModeloIncompatible() {
		boolean blnVerificado = false;
				
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.modeloIncompatible))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "Controla correctamente existencia de modelo");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "NO controla correctamente exitencia de modelo");
		
		
		return blnVerificado;
	}

	
	public static void crearSentenciaExpedienteUbicacionExterna() {
		
		if (GestorDeDatosTestigo.getControlCantRowsOrigen() ==0)
		{
			GestorDeActuaciones.buscarActuaciones();
			List<WebElement> allRows = obtenerFilasTotalesAct();
			GestorDeDatosTestigo.setControlCantRowsOrigen(allRows.size());
		}
		
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
			
	}

	public static boolean verificarSentenciaExpedienteUbicacionExterna() {
		boolean blnVerificado = false;
				
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.expedienteUbicacionExterna))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "Controla correctamente existencia de modelo");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "NO controla correctamente exitencia de modelo");
		
		
		return blnVerificado;
	}

	public static void firmarActuacionFechaPosterior() {
		
		buscarActuacionesPorCUIJ();
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink1"));
		Driver.Instance.findElement(By.id("form1:commandLink1")).click();
		
		GestorDeActuaciones.irAlPopupActuaciones();
		
		Popup.findElement(By.id("selectInputDate1")).clear();
		Popup.findElement(By.id("selectInputDate1"))
		.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaFirma().toString());
		
		try {
			Popup.findElement(By.id("commandButton1")).click();	
		
		}  catch(NoSuchElementException e) {
			System.out.println(e.getMessage());
			Popup.switchTo().frame(0);
			Popup.findElement(By.id("commandButton1")).click();
		}
		
		volverDelPopup();
		
	}
	
	public static boolean verificarActuacionFirmadaFechaPosterior() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.actuacionFirmadaFechaPosterior))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuacion con fecha posterior - ", "Controla correctamente la fecha posterior al firmar actuacion");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuacion con fecha posterior - ", "NO controla correctamente la fecha posterior al firmar actuacion");
		
		
		return blnVerificado;
	}

	public static void buscarActuacionesPorCUIJ() {

		irAlFramePorDefecto();
		
		Driver.EsperarDisponible(By.id("form1:showDetail111111__xc_"));
		WebElement mostrarDetalle = Driver.Instance.findElement(By.id("form1:showDetail111111__xc_"));
		if (mostrarDetalle.findElement(By.tagName("img")).getAttribute("title").contains("mostrar"))
			mostrarDetalle.click();
			
		Driver.EsperarDisponible(By.id("form1:helper"));
		Driver.Instance.findElement(By.id("form1:helper")).click();
		GestorDeActuaciones.buscarExpedientePopup();	
		
		Driver.Instance.findElement(By.id("form1:commandLink12")).click();	
	}

	public static void eliminarActuacionFirmada() {
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton3")).click();
		
		irAlDialogo();
		Dialogo.accept();
		volverDelDialogo();		
		
	}

	public static boolean verificarEliminarActuacionFirmada() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.eliminarActuacionFirmada))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Eliminar actuacion firmada - ", "Controla correctamente la imposibilidad de eliminar actuaciones firmadas");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Eliminar actuacion firmada - ", "NO controla correctamente la imposibilidad de eliminar actuaciones firmadas");
		
		
		return blnVerificado;
	}

	public static void editarActuacionExtractoVacio() {
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:menuBar1:commandMenuItem4"));
		Driver.Instance.findElement(By.id("form1:menuBar1:commandMenuItem4")).click();
		
		Driver.EsperarDisponible(By.id("form1:inputText1"));
		Driver.Instance.findElement(By.id("form1:inputText1")).clear();
		
		//Driver.EsperarDisponible(By.classname("x1k"));
		Driver.Instance.findElement(By.className("x1k")).click();
	}

	public static boolean verificarEditarActuacionExtractoVacio() {
		 boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.editarActuacionExtractoVacio))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Editar actuacion extracto vacio - ", "Controla correctamente la imposibilidad de editar actuacion dejando el extracto vacio");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Editar actuacion extracto vacio - ", "NO controla correctamente la imposibilidad de editar actuacion dejando el extracto vacio");
		
		
		return blnVerificado;
	}
	
	public static void linkProtocolizarActuaciones() {
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink121211111"));
		Driver.Instance.findElement(By.id("form1:commandLink121211111")).click();
				
	}

	public static boolean verificarLinkProtocolizarActuaciones() {
		boolean blnVerificado = false;
		irAlFramePorDefecto();

		// Verifica contenido del título en la página accedida
		if (Driver.Instance.findElement(By.xpath("//h1[@class='x20 AFHeaderAlias']")).
				getText().contains(protocolizarActuacion)) {
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Link Protocolizar Actuación - ", "Se accede correctamente a la pantalla de protocolizar actuación");
		} else {
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Link Protocolizar Actuación - ", "No se puede acceder a la pantalla de protocolizar actuación");
		}

		return blnVerificado;
	}

	
	public static boolean verificarDatoIndividual(String campo, String mensaje) {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
	
		if (Driver.Instance.findElement(By.className("x3z")).getText().isEmpty() 
				&& Driver.Instance.findElement(By.id("message1")).getText().contains(mensaje))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuaciones - Campo "+ campo, mensaje);
		
		} else 
			if (Driver.Instance.findElement(By.className("x3z")).getText().contains(mensaje))
			{	
				blnVerificado = true;
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuaciones - Campo "+ campo, mensaje);
			} else 
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuaciones - Campo "+ campo, "No valida campo individual");
		
		return blnVerificado;
	}
	
	
	


	public static void protocolizarActuacionFolioIncompatible() {
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink121211111"));
		Driver.Instance.findElement(By.id("form1:commandLink121211111")).click();
		
		WebElement folio = Driver.Instance.findElement(By.id("form11:inputText1"));
		folio.clear();
		folio.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFolio());
		
		Driver.EsperarDisponible(By.id("form11:menuBar1:commandButton1"));
		Driver.Instance.findElement(By.id("form11:menuBar1:commandButton1")).click();
	
	}

	public static void protocolizarActuacionResolucionIncompatible() {
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink121211111"));
		Driver.Instance.findElement(By.id("form1:commandLink121211111")).click();
		
		WebElement resolucion = Driver.Instance.findElement(By.id("form11:inputText2"));
		resolucion.clear();
		resolucion.sendKeys(GestorDeDatosDePrueba.Actuaciones.getResolucion());
		
		Driver.EsperarDisponible(By.id("form11:menuBar1:commandButton1"));
		Driver.Instance.findElement(By.id("form11:menuBar1:commandButton1")).click();
		
	}

	public static void protocolizarResolucionCero() {
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink121211111"));
		Driver.Instance.findElement(By.id("form1:commandLink121211111")).click();
		
		WebElement resolucion = Driver.Instance.findElement(By.id("form11:inputText2"));
		resolucion.clear();
		resolucion.sendKeys("0");
	
		Driver.EsperarDisponible(By.id("form11:menuBar1:commandButton1"));
		Driver.Instance.findElement(By.id("form11:menuBar1:commandButton1")).click();
	}

	public static boolean verificarprotocolizarResolucionCero() {
		
		boolean blnVerificado = false;
			
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.resolucionCero))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Protocolizar con resolucion cero - ", "Controla correctamente la imposibilidad de protocolizar con resolucion cero");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Protocolizar con resolucion cero - ", "NO controla correctamente la imposibilidad de protocolizar con resolucion cero");
			
			
		return blnVerificado;
	}
	
	public static void protocolizarResolucionDuplicada() {
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink121211111"));
		Driver.Instance.findElement(By.id("form1:commandLink121211111")).click();
		
		Driver.EsperarDisponible(By.id("form11:inputText2"));
		WebElement resolucion = Driver.Instance.findElement(By.id("form11:inputText2"));
		// Enviamos la resolucion ofrecida por defecto menos uno, siempre sera una duplicada excepto en el caso de que la ofrecida sea 1.
		String resolucionString = resolucion.getAttribute("value");
		int resolucionInt = Integer.parseInt(resolucionString);
		resolucionInt = resolucionInt - 1;
		resolucionString = String.valueOf(resolucionInt);
		resolucion.clear();
		resolucion.sendKeys(resolucionString);
	
		Driver.EsperarDisponible(By.id("form11:menuBar1:commandButton1"));
		Driver.Instance.findElement(By.id("form11:menuBar1:commandButton1")).click();
	}

	public static boolean verificarprotocolizarResolucionDuplicada() {
		
		boolean blnVerificado = false;
			
		irAlFramePorDefecto();
		
		WebElement resolucion = Driver.Instance.findElement(By.className("x9c"));
		if (resolucion.getText().contains(RegresionActuaciones.resolucionDuplicada1) &&
				(resolucion.getText().contains(RegresionActuaciones.resolucionDuplicada2)))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Protocolizar con resolucion duplicada - ", "Controla correctamente la imposibilidad de protocolizar con resolucion duplicada");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Protocolizar con resolucion duplicada - ", "NO controla correctamente la imposibilidad de protocolizar con resolucion duplicada");
			
			
		return blnVerificado;
	}
	
	
	public static void protocolizarResolucionFueraRango() {
		Select wSelector;
		
		buscarActuacionesPorCUIJ();
		
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink121211111"));
		Driver.Instance.findElement(By.id("form1:commandLink121211111")).click();

		Driver.EsperarDisponible(By.id("form11:helper1"));
		Driver.Instance.findElement(By.id("form11:helper1")).click();
		
		GestorDeActuaciones.irAlPopupActuaciones();
		
		if (Popup.findElements(By.id("form2:table1-nb")).size() != 0)
		{
        	wSelector = null;         
    		wSelector = new Select(Popup.findElement(By.id("form2:table1-nb__xc_c")));
    		wSelector.selectByValue("all");	
         }
		
		// Buscamos protocolos del año 2012 y elegimos el primero. La actuacion a protocolizar no debe estar en ese rango.
		WebElement anio = Driver.Instance.findElement(By.id("form2:inputText1"));
		anio.sendKeys("2010");	
		Driver.Instance.findElement(By.id("form2:commandLink11")).click();
		
		Driver.EsperarDisponible(By.id("form2:table1:menuBar2:commandButton31"));
		Driver.Instance.findElement(By.id("form2:table1:menuBar2:commandButton31")).click();
		
		volverDelPopup();


	}

	public static boolean verificarprotocolizarResolucionFueraRango() {
		
		boolean blnVerificado = false;
			
		irAlFramePorDefecto();
		
		
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.resolucionFueraRango))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Protocolo fuera de rango - ", "Controla correctamente que la actuación fue firmada en una fecha fuera de rango para el protocolo seleccionado");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Protocolo fuera de rango - ", "NO controla correctamente que la actuación fue firmada en una fecha fuera de rango para el protocolo seleccionado");
		
			
		return blnVerificado;
	}


	public static boolean verificarLinkFirmarActuaciones() {
		boolean blnVerificado = false;
		irAlFramePorDefecto();
/*
		// Verifica contenido del título en la página accedida
		Driver.EsperarDisponible(By.xpath("//h1[@class='x20 AFHeaderAlias']"));
		if (Driver.Instance.findElement(By.xpath("//h1[@class='x20 AFHeaderAlias']")).
				getText().contains(firmarActuaciones)) {
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Link Firmar Actuaciones - ", "Se accede correctamente a la pantalla de firmar actuaciones");
		} else {
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Link Firmar Actuaciones - ", "NO se accede correctamente a la pantalla de firmar actuaciones");
		}
*/
		blnVerificado = true;
		return blnVerificado;
	}

	public static void firmarActuacionesExpedienteObligatorio() {
		
		irAlFramePorDefecto();
		
		Driver.Instance.findElement(By.id("commandButton1")).click();
		
	}

	public static boolean verificarFirmarActuacionesExpedienteObligatorio() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
	
		if (Driver.Instance.findElement(By.className("x3z")).getText().isEmpty() 
				&& Driver.Instance.findElement(By.id("message11")).getText().contains(debeSeleccionarUnValor))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Expediente", debeSeleccionarUnValor);
		
		} else 
			if (Driver.Instance.findElement(By.className("x3z")).getText().contains(debeSeleccionarUnValor))
			{	
				blnVerificado = true;
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Expediente", debeSeleccionarUnValor);
			} else 
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Expediente ", "No valida campo individual");
		
		return blnVerificado;
	}

	public static void firmarActuacionesCodigoBarrasIncompatible() {
		
		irAlFramePorDefecto();
		
		Driver.EsperarDisponible(By.id("inputText17"));
		WebElement CUIJ = Driver.Instance.findElement(By.id("inputText17"));
		CUIJ.clear();
		CUIJ.sendKeys(GestorDeDatosDePrueba.Actuaciones.getCUIJ());
		
		Driver.Instance.findElement(By.id("commandButton1")).click();
		
	}

	public static boolean verificarFirmarActuacionesCodigoBarrasIncompatible() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
	
		if (Driver.Instance.findElement(By.className("x3z")).getText().isEmpty() 
				&& Driver.Instance.findElement(By.id("message11")).getText().contains(valorNoNumerico))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Código Barras ", valorNoNumerico);
		
		} else 
			if (Driver.Instance.findElement(By.className("x3z")).getText().contains(valorNoNumerico))
			{	
				blnVerificado = true;
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Código Barras ", valorNoNumerico);
			} else 
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Código Barras", "No valida campo individual");
		
		return blnVerificado;
	}
	
	public static void firmarActuacionesCodigoBarrasIncorrecto() {
		
		irAlFramePorDefecto();
		
		Driver.EsperarDisponible(By.id("inputText17"));
		WebElement CUIJ = Driver.Instance.findElement(By.id("inputText17"));
		CUIJ.clear();
		CUIJ.sendKeys(GestorDeDatosDePrueba.Actuaciones.getCUIJ());
		
		Driver.Instance.findElement(By.id("commandButton1")).click();
		
	}

	public static boolean verificarFirmarActuacionesCodigoBarrasIncorrecto() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
	
		if (Driver.Instance.findElement(By.className("x3z")).getText().isEmpty() 
				&& Driver.Instance.findElement(By.id("message11")).getText().contains(debeSeleccionarUnValor))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Código Barras ", debeSeleccionarUnValor);
		
		} else 
			if (Driver.Instance.findElement(By.className("x3z")).getText().contains(debeSeleccionarUnValor))
			{	
				blnVerificado = true;
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Código Barras ", debeSeleccionarUnValor);
			} else 
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuaciones - Código Barras", "No valida campo individual");
		
		return blnVerificado;
	}

	public static void firmarActuacionesFechaMovimientoIncompatible() {
		
		irAlFramePorDefecto();
		
		Driver.EsperarDisponible(By.id("selectInputDate1"));
		WebElement FechaActual = Driver.Instance.findElement(By.id("selectInputDate1"));
		FechaActual.clear();
		FechaActual.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
		
		Driver.Instance.findElement(By.id("commandButton1")).click();
		
	}

	
	public static void firmarActuacionesFechaFirmaIncompatible() {
		
		irAlFramePorDefecto();
		
		Driver.EsperarDisponible(By.id("selectInputDate2"));
		WebElement FechaFirma = Driver.Instance.findElement(By.id("selectInputDate2"));
		FechaFirma.clear();
		FechaFirma.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaFirma());
		
		Driver.Instance.findElement(By.id("commandButton1")).click();
		
	}

	public static void firmarActuacionesFechaFirmaPosterior() {
		
		irAlFramePorDefecto();
		
		Driver.Instance.findElement(By.id("helper1")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("selectInputDate2"));
		WebElement FechaFirma = Driver.Instance.findElement(By.id("selectInputDate2"));
		FechaFirma.clear();
		FechaFirma.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaFirma());
		
		Driver.Instance.findElement(By.id("commandButton1")).click();
		
	}

	public static boolean verificarFirmarActuacionesFechaFirmaPosterior() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.actuacionesFirmadasFechaPosterior))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Fecha Firma posterior a actual - ", "Controla correctamente que la fecha de firma no sea posterior a la actual");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Fecha Firma posterior a actual - ", "NO controla correctamente que la fecha de firma no sea posterior a la actual");
		
			
		return blnVerificado;
	}

	public static void crearSentenciaExpedienteObligatorio() {
		
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
	}

	public static boolean verificarSentenciaExpedienteObligatorio() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.expedienteObligatorio))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "Controla correctamente la obligatoriedad de expediente");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Nueva Actuacion Sentencia - ", "NO controla correctamente la obligatoriedad de expediente");
		
		
		return blnVerificado;
	}
	
	public static void firmarActuacionFechaIncompatible() {
		
		buscarActuacionesPorCUIJ();
		Driver.Instance.findElement(By.id("form1:table1:menuBar2:commandButton2")).click();
		
		Driver.EsperarDisponible(By.id("form1:commandLink1"));
		Driver.Instance.findElement(By.id("form1:commandLink1")).click();
		
		GestorDeActuaciones.irAlPopupActuaciones();
		
		Popup.findElement(By.id("selectInputDate1")).clear();
		Popup.findElement(By.id("selectInputDate1"))
		.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaFirma().toString());
		
		try {
			Popup.findElement(By.id("commandButton1")).click();	
		
		}  catch(NoSuchElementException e) {
			System.out.println(e.getMessage());
			Popup.switchTo().frame(0);
			Popup.findElement(By.id("commandButton1")).click();
		}
		
		volverDelPopup();
		
	}

	public static boolean verificarActuacionFirmadaFechaIncompatible() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
	
		GestorDeActuaciones.irAlPopupActuaciones();
		
				
		if (Popup.findElement(By.className("x3z")).getText().contains(fechaInvalida))
		{	
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuacion - Fecha Firma ", fechaInvalida);
		} else 
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Firmar Actuacion - Fecha Firma", "No valida campo individual");
		
		volverDelPopup();
			
		return blnVerificado;
	}

	public static void crearSentenciaFechaPosterior() {
		
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
		Driver.EsperarDisponible(By.id("form11:selectInputDate3"));
		WebElement fecha = Driver.Instance.findElement(By.id("form11:selectInputDate3"));
		fecha.clear();
		fecha.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
		
		// Añadido por cambio a obligatorio de Fecha Audiencia (20181113)
		Driver.EsperarDisponible(By.id("form11:selectInputDate2"));
		WebElement fecha2 = Driver.Instance.findElement(By.id("form11:selectInputDate2"));
		fecha2.clear();
		fecha2.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
		// Fin añadido
					
		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
		
	}

	public static boolean verificarSentenciaFechaPosterior() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.fechaPosterior))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha posterior - ", "Controla correctamente que la actuación no sea creada con fecha posterior a la actual");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha posterior - ", "NO controla correctamente que la actuación no sea creada con fecha posterior a la actual");
		
			
		return blnVerificado;
	}

	public static void crearSentenciaFechaVencimientoAnterior() {
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
		Driver.EsperarDisponible(By.id("form11:selectInputDate1"));
		WebElement fecha = Driver.Instance.findElement(By.id("form11:selectInputDate1"));
		fecha.clear();
		fecha.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
					
		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
		
	}

	public static boolean verificarSentenciaFechaVencimientoAnterior() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.fechaVencimientoAnterior))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha vencimiento anterior - ", "Controla correctamente que la actuación no sea creada con fecha vencimiento anterior a la actual");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha vencimiento anterior - ", "NO controla correctamente que la actuación no sea creada con fecha vencimiento anterior a la actual");
		
			
		return blnVerificado;
	}

	public static void crearActuacionModeloIncorrecto() {
		
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink21212")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
	}

	public static boolean verificarActuacionModeloIncorrecto() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(RegresionActuaciones.modeloIncompatible))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion modelo incompatible - ", "Controla correctamente que la actuación sea creada con un modelo correspondiente a su tipo");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion modelo incompatible - ", "No controla correctamente que la actuación sea creada con un modelo correspondiente a su tipo");
		
			
		return blnVerificado;
	}

	public static void crearActuacionFechaCreacionIncompatible() {
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
		Driver.EsperarDisponible(By.id("form11:selectInputDate3"));
		WebElement fecha = Driver.Instance.findElement(By.id("form11:selectInputDate3"));
		fecha.clear();
		fecha.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
					
		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
		
	}

	public static boolean verificarActuacionFechaCreacionIncompatible() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9f")).getText().contains(RegresionActuaciones.fechaIncompatible))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha creacion incompatible - ", "Controla correctamente que la actuación no sea creada con fecha creacion incompatible");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha creacion incompatible - ", "NO controla correctamente que la actuación no sea creada con fecha creacion incompatible");
		
			
		return blnVerificado;
	}

	public static void crearSentenciaVencimientoIncompatible() {
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
		Driver.EsperarDisponible(By.id("form11:selectInputDate1"));
		WebElement fecha = Driver.Instance.findElement(By.id("form11:selectInputDate1"));
		fecha.clear();
		fecha.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
					
		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
		
	}

	public static boolean verificarSentenciaVencimientoIncompatible() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9f")).getText().contains(RegresionActuaciones.fechaIncompatible))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con vencimiento incompatible - ", "Controla correctamente que la actuación no sea creada con vencimiento incompatible");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con vencimiento incompatible - ", "NO controla correctamente que la actuación no sea creada con vencimiento incompatible");
		
			
		return blnVerificado;
	}

	public static void crearSentenciaFechaAudienciaIncompatible() {
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
		Driver.EsperarDisponible(By.id("form11:selectInputDate2"));
		WebElement fecha = Driver.Instance.findElement(By.id("form11:selectInputDate2"));
		fecha.clear();
		fecha.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
					
		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
		
	}

	public static boolean verificarSentenciaFechaAudienciaIncompatible() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9f")).getText().contains(RegresionActuaciones.fechaIncompatible))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha audiencia incompatible - ", "Controla correctamente que la actuación no sea creada con fecha audiencia incompatible");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con fecha audiencia incompatible - ", "NO controla correctamente que la actuación no sea creada con fecha audiencia incompatible");
		
			
		return blnVerificado;
	}

	public static void crearSentenciaHoraAudienciaIncompatible() {
		irAlFramePorDefecto();
		Driver.Instance.findElement(By.id("form1:commandLink2112")).click();
		
		Driver.Instance.findElement(By.id("form11:helper")).click();
		
		GestorDeActuaciones.buscarExpedientePopup();
		
		Driver.EsperarDisponible(By.id("form11:inputText4"));
		WebElement modelo = Driver.Instance.findElement(By.id("form11:inputText4"));
		modelo.clear();
		modelo.sendKeys(GestorDeDatosDePrueba.Actuaciones.getModelo());
		
		Driver.Instance.findElement(By.id("form11:commandButton111")).click();
		
		Driver.EsperarDisponible(By.id("form11:inputText3"));
		WebElement fecha = Driver.Instance.findElement(By.id("form11:inputText3"));
		fecha.clear();
		fecha.sendKeys(GestorDeDatosDePrueba.Actuaciones.getFechaActual());
					
		Driver.EsperarDisponible(By.id("form11:commandButton31"));
		Driver.Instance.findElement(By.id("form11:commandButton31")).click();
		
	}

	public static boolean verificarSentenciaHoraAudienciaIncompatible() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9f")).getText().contains(RegresionActuaciones.horaIncompatible))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con hora audiencia incompatible - ", "Controla correctamente que la actuación no sea creada con hora audiencia incompatible");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Actuacion con hora audiencia incompatible - ", "NO controla correctamente que la actuación no sea creada con hora audiencia incompatible");
		
			
		return blnVerificado;
	}

}





