package com.indra.pjsf.regresion;

import org.junit.Assert;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

import com.indra.pjsf.regresion.RegresionTestBase.msjResultado;
import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba.entidades;
import com.indra.pjsf.tf.paginas.PgnFichaActuacion;
import com.indra.pjsf.tf.paginas.PgnListadoActuaciones;
import com.indra.pjsf.tf.paginas.PgnNuevaActuacion;


@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CrearActuaciones_FF  extends RegresionTestBase {
	
	@Test
	public void A_GE_004_301_Actuacion_Expediente_Ubicacion_Externa(){
		codigo = "GE-004.301";
		prepararDatos(entidades.Actuaciones);
						
		//PgnListadoActuaciones.ir();
		PgnListadoActuaciones.irDesdePrincipal(); //Tempo por prueba unitaria
			
		PgnNuevaActuacion.crearSentenciaExpedienteUbicacionExterna();
		
		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(), 
					PgnNuevaActuacion.verificarSentenciaExpedienteUbicacionExterna());
				resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
	}
	
	// Todavia no ejecutar en Produccion
	@Test
	public void A_GE_004_302_Actuacion_Fecha_Posterior() {
		codigo = "GE-004.302";
		prepararDatos(entidades.Actuaciones);
						
		PgnListadoActuaciones.ir();
		//PgnListadoActuaciones.irDesdePrincipal(); //Tempo por prueba unitaria
		
		PgnNuevaActuacion.crearSentenciaFechaPosterior();
		
		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(), 
					PgnNuevaActuacion.verificarSentenciaFechaPosterior());
				resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
	}
	
	// Todavia no ejecutar en Produccion
	@Test
	public void A_GE_004_303_Actuacion_Fecha_VencimientoAnterior() {
		codigo = "GE-004.303";
		prepararDatos(entidades.Actuaciones);
						
		PgnListadoActuaciones.ir();
		//PgnListadoActuaciones.irDesdePrincipal(); //Tempo por prueba unitaria
		
		PgnNuevaActuacion.crearSentenciaFechaVencimientoAnterior();
		
		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(), 
					PgnNuevaActuacion.verificarSentenciaFechaVencimientoAnterior());
				resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
	}
	
	//Todavia no ejecutar en Produccion
	@Test
	public void A_GE_004_304_Actuacion_Modelo_Incorrecto() {
		codigo = "GE-004.304";
		prepararDatos(entidades.Actuaciones);
						
		PgnListadoActuaciones.ir();
		//PgnListadoActuaciones.irDesdePrincipal(); //Tempo por prueba unitaria
		
		PgnNuevaActuacion.crearActuacionModeloIncorrecto();
		
		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(), 
					PgnNuevaActuacion.verificarActuacionModeloIncorrecto());
				resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
	}
	
	@Test
	public void A_GE_004_305_Editar_Actuacion_Extracto_Vacio(){
		codigo = "GE-004.305";
		prepararDatos(entidades.Actuaciones);
		
		PgnListadoActuaciones.ir();
		//PgnListadoActuaciones.irDesdePrincipal(); //Tempo por prueba unitaria
		
		PgnFichaActuacion.editarActuacionExtractoVacio();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnFichaActuacion.verificarEditarActuacionExtractoVacio());
		resultado = true; 
			
		}  catch(Exception e){
			resultado = false;
		} 
	}

	@Test
	public void A_GE_004_306_Eliminar_Actuacion_Firmada(){
		codigo = "GE-004.306";
		prepararDatos(entidades.Actuaciones);
		
		PgnListadoActuaciones.ir();
		//PgnListadoActuaciones.irDesdePrincipal(); //Tempo por prueba unitaria
		//Uso el método firmarActuaciones de Smoke
		PgnFichaActuacion.eliminarActuacionFirmada();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnFichaActuacion.verificarEliminarActuacionFirmada());
		resultado = true; 
			
		}  catch(Exception e){
			resultado = false;
		} 
	}

	
	@Test
	public void A_GE_004_307_Firmar_Actuacion_Fecha_Posterior(){
		codigo = "GE-004.307";
		prepararDatos(entidades.Actuaciones);
		
		PgnListadoActuaciones.ir();
		//PgnListadoActuaciones.irDesdePrincipal(); //Tempo por prueba unitaria

		PgnFichaActuacion.firmarActuacionFechaPosterior();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnFichaActuacion.verificarActuacionFirmadaFechaPosterior());
		resultado = true; 
			
		}  catch(Exception e){
			resultado = false;
		} 
	}
	

	
	}
