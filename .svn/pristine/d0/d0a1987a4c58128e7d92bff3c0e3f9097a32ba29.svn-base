package com.indra.pjsf.tf.workflows;


import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.indra.pjsf.tf.Driver;
import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba;
import com.indra.pjsf.tf.datos.GestorDeDatosTestigo;

public class RegresionCargos extends GestorBase {
	
	public static String faltaIntroducirValor = "Se debe introducir un valor.";
	public static String faltaSeleccionarValor = "Se debe seleccionar un valor.";
	public static String formatoHora = "La hora debe tener el formato HH:mm";
	public static String formatoFecha = "no es una fecha válida. Ejemplo válido";
	public static String aperturaAnterior = "La fecha de apertura ingresada es inferior a la fecha del sistema.";
	public static String aperturaPosterior = "La fecha de apertura ingresada es superior a la fecha del sistema.";
	public static String aperturaSolapada = "La fecha de apertura del libro de cargos es incorrecta. No puede ser inferior a la del último cierre";
	public static String aperturaPosteriorTope = aperturaPosterior;
	public static String tituloLibroCargo = "Apertura de libro de cargos";
	public static String tituloCerrarCargo = "Cierre de libro de cargos";
	public static String tituloPrincipal = "Lista de Apertura";
	public static String tituloIniciarMeu = "Expedientes registrados en MEU pendientes de inicio";
	public static String nuevoCargo = "Nuevo Cargo";
	public static String cierreDiferente = "fecha de cierre no puede ser distinta";
	public static String cierreAnteriorApertura = "la hora de cierre no puede ser menor a la hora de apertura";
	public static String cierreAnteriorCargo = "tiene hora posterior";
	public static String cierrePosteriorTope = "no puede ser superior a la hora tope";
	public static String valorNoNumerico = "no es un número";
	public static String valorNoFecha = "No es una fecha";
	public static String libroCerrado = "No existe ningún libro de cargos abierto actualmente";
	public static String horaPosterior = "La Hora del Cargo no puede ser mayor a la Hora Actual.";
	public static String horaAnterior = "La Hora del Cargo debe ser mayor o igual a la Hora de apertura del libro.";
	public static String observacionesObligatorio = "Debe ingresar observaciones";

	
	
	public static enum campo {
		Fecha,
		Hora,
		Presentante,
		Solicita,
		Escrito,
		Expediente,
		Modo,
		Materia,
		Vinculo,
		Actor,
		Domicilio,
		Ubicacion,
		Observaciones
		
	}
	
	
	public static void integridadAbrirLibro(){
		irAlFramePorDefecto();
		
		WebElement btnAbrir =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnAbrir.click();
			
	}
	
	public static void abrirLibroCargosSinGrabar(){
		irAlFramePorDefecto();
		
		WebElement btnAbrir =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnAbrir.click();
		
		WebElement fechaLibro =  Driver.Instance.findElement(By.id("form11:selectInputDate1"));
		fechaLibro.clear();
		fechaLibro.sendKeys(GestorDeDatosDePrueba.Cargo.getFechaLibro());
		
		WebElement horaApertura =  Driver.Instance.findElement(By.id("form11:inputText3"));
		horaApertura.clear();
		horaApertura.sendKeys(GestorDeDatosDePrueba.Cargo.getHoraApertura());
		
		WebElement observacionesLibro =  Driver.Instance.findElement(By.id("form11:inputText1"));
		observacionesLibro.sendKeys(GestorDeDatosDePrueba.Cargo.getComentarios());
		
		WebElement btnGuardar =  Driver.Instance.findElement(By.id("form11:menuBar1:commandButton1"));
		btnGuardar.click();
			
	}
	
	public static void cerrarLibroCargosSinGrabar(){
		irAlFramePorDefecto();
		
		WebElement btnCerrar = Driver.Instance.findElement(By.id("form2:table1:menuBar2:commandButton21"));
		btnCerrar.click();
		
		Driver.EsperarDisponible(By.id("form11:inputText3"));	
		
		WebElement diaCierre= Driver.Instance.findElement(By.id("form11:selectInputDate1"));
		diaCierre.clear();
		diaCierre.sendKeys(GestorDeDatosDePrueba.Cargo.getFechaLibro());
		
		WebElement horaCierre= Driver.Instance.findElement(By.id("form11:inputText3"));
		horaCierre.clear();
		horaCierre.sendKeys(GestorDeDatosDePrueba.Cargo.getHoraCierre());
		
		WebElement txtObservacion = Driver.Instance.findElement(By.id("form11:inputText1"));
		txtObservacion.sendKeys("   -   Cierre   -   " + GestorDeDatosDePrueba.Cargo.getComentarios());
				
		WebElement btnGuardar = Driver.Instance.findElement(By.id("form11:menuBar11:commandButton12"));
		btnGuardar.click();
		
		Driver.EsperarDisponible(By.id("form11:commandButton11"));
		
		WebElement btnConfirmar = Driver.Instance.findElement(By.id("form11:commandButton11"));
		btnConfirmar.click();
			
	}
	
			
	public static boolean verificarDatoIndividual(String campo, String mensaje) {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
	
		if (Driver.Instance.findElement(By.className("x3z")).getText().isEmpty() 
				&& Driver.Instance.findElement(By.id("message1")).getText().contains(mensaje))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Cargos - Campo "+ campo, mensaje);
		
		} else 
			if (Driver.Instance.findElement(By.className("x3z")).getText().contains(mensaje))
			{	
				blnVerificado = true;
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Cargos - Campo "+ campo, mensaje);
			} else 
				GestorDeDatosTestigo.agregarTextoDatosTestigo("Cargos - Campo "+ campo, "No valida campo individual");
		
		return blnVerificado;
	}
	
	
	public static boolean verificarLinkAbrir() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
	
		if (Driver.Instance.findElement(By.id("form11:panelHeader1")).getText().contains(tituloLibroCargo))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", tituloLibroCargo);
			
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "Aplicación No Disponible");
		
		return blnVerificado;
	}

	public static void integridadCerrarLibro() {
		
		irAlFramePorDefecto();
		
		WebElement btnCerrar = Driver.Instance.findElement(By.id("form2:table1:menuBar2:commandButton21"));
		btnCerrar.click();
		
	}
	
	public static boolean verificarLinkCerrar() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
	
		if (Driver.Instance.findElement(By.id("form11:panelHeader11")).getText().contains(tituloCerrarCargo))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", tituloCerrarCargo);
			
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "Aplicación No Disponible");
		
		return blnVerificado;
	}
		
	public static void linkNuevoCargo() {
		irAlFramePorDefecto();

		// Hago click en el boton de nuevo
		WebElement btnNuevo =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnNuevo.click();		
	}

	
	public static boolean validarAccesoNuevoCargo() {
		boolean blnVerificado = false;
		irAlFramePorDefecto();

		// Verifica contenido del título en la página accedida
		if (Driver.Instance.findElement(By.xpath("//h1[@class='x20 AFHeaderAlias']")).
				getText().contains(nuevoCargo)) {
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "Se accede correctamente a la pantalla de Nuevo Cargo");
		} else {
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "No se puede acceder a la pantalla de Nuevo Cargo");
		}

		return blnVerificado;
	}

	public static void abrirLibroCargos() {
			irAlFramePorDefecto();
			
			WebElement btnAbrir =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
			btnAbrir.click();
			
			WebElement fechaLibro =  Driver.Instance.findElement(By.id("form11:selectInputDate1"));
			fechaLibro.clear();
			fechaLibro.sendKeys(GestorDeDatosDePrueba.Cargo.getFechaLibro());
			
			WebElement horaApertura =  Driver.Instance.findElement(By.id("form11:inputText3"));
			horaApertura.clear();
			horaApertura.sendKeys(GestorDeDatosDePrueba.Cargo.getHoraApertura());
			
			WebElement observacionesLibro =  Driver.Instance.findElement(By.id("form11:inputText1"));
			observacionesLibro.sendKeys(GestorDeDatosDePrueba.Cargo.getComentarios());
			
			WebElement btnGuardar =  Driver.Instance.findElement(By.id("form11:menuBar1:commandButton1"));
			btnGuardar.click();
			
			WebElement btnConfirmaSI =  Driver.Instance.findElement(By.id("form11:commandButton11"));
			btnConfirmaSI.click();
			
		}
	
	public static boolean verificarCargoAbierto() {
		boolean blnCargoAbierto = false;
		irAlFramePorDefecto();
			
		if (Driver.Instance.findElement(By.id("form2:table1:0:outputText7")).getText()
				.contains(GestorDeDatosDePrueba.Cargo.FechaHoraAperturaLibro()))
		{
			if (Driver.Instance.findElement(By.id("form2:table1:0:outputText1")).getText() == null)
				blnCargoAbierto = true;
			else
				if (Driver.Instance.findElement(By.id("form2:table1:0:outputText1")).getText().trim().equals(""))
					blnCargoAbierto = true;
		}
		
		GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos Abierto", GestorDeDatosDePrueba.Cargo.getComentarios());
		GestorDeDatosTestigo.agregarTextoDatosTestigo("Fecha y Hora", GestorDeDatosDePrueba.Cargo.FechaHoraAperturaLibro());
		
		return blnCargoAbierto;
	}

	public static boolean verificarTextoInformacion(String frase) {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9c")).getText()
				.contains(frase))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", Driver.Instance.findElement(By.className("x9c")).getText());
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "No valida información de fecha u hora");
		
		return blnVerificado;
	}
	
	public static boolean verificarTextoError(String frase) {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9f")).getText()
				.contains(frase))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", Driver.Instance.findElement(By.className("x3w")).getText());
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "No valida dato de consulta");
		
		return blnVerificado;
	}

	public static boolean verificarLinkLibroCargos() {
		boolean blnVerificado = false;
	
		irAlFramePorDefecto();
		if (Driver.Instance.findElement(By.id("form2:panelHeader1")).getText().contains(tituloPrincipal))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Cargos - ", "Se accede correctamente a la pantalla " + tituloPrincipal);
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Cargos - ", "No accede correctamente a la pantalla " + tituloPrincipal);
		
		return blnVerificado;
	}
	
	public static boolean verificarLinkIniciarMeu() {
		boolean blnVerificado = false;
		//System.out.println("Entre al verificar el link");
	
		irAlFramePorDefecto();
		//System.out.println(Driver.Instance.findElement(By.id("form2:panelHeader1")).getText().toString());
		
		if (Driver.Instance.findElement(By.id("form2:panelHeader1")).getText().contains(tituloIniciarMeu))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Cargos - ", "Se accede correctamente a la pantalla " + tituloIniciarMeu);
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Cargos - ", "No accede correctamente a la pantalla " + tituloIniciarMeu);
		
		return blnVerificado;
	}

	public static void nuevoCargoValidacionesSR(){
		irAlFramePorDefecto();

		// Hago click en el boton de nuevo
		WebElement btnNuevo =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnNuevo.click();
		
		// Cargo la hora
		WebElement textoHora = Driver.Instance.findElement(By.id("inputText1"));
		textoHora.clear();
		textoHora.sendKeys(GestorDeDatosDePrueba.Cargo.getHora());

		// Cargo el Presentante en el popUp
		WebElement presentante =  Driver.Instance.findElement(By.id("inputPrimerPresentante"));
		presentante.clear();
		presentante.sendKeys(GestorDeDatosDePrueba.Cargo.getPresentante());

		// Cargo en Solicita una observacion
		WebElement solicita =  Driver.Instance.findElement(By.id("inputText2"));
		solicita.clear();
		solicita.sendKeys(GestorDeDatosDePrueba.Cargo.getSolicita());
		
		Select wSelector = null;
		// selecciono la opcion dentro de "Grupo o clase"
		WebElement grupoClase =  Driver.Instance.findElement(By.id("selectOneChoice21"));
		wSelector = new Select(grupoClase);
		wSelector.selectByVisibleText(GestorDeDatosDePrueba.Cargo.getGrupoClase());

		// Espero a que cargue el combo de "Tipo de Escrito"
		Driver.EsperarDisponible(By.id("selectOneChoice3"));
	
		// Selecciono la opcion dentro de "Tipo de Escrito"
		WebElement tipo = Driver.Instance.findElement(By.id("selectOneChoice3"));
		wSelector = new Select(tipo);
		wSelector.selectByVisibleText(GestorDeDatosDePrueba.Cargo.getTipo());

		// Click en el boton de siguiente
		WebElement btnSiguiente =  Driver.Instance.findElement(By.id("commandButton13"));
		btnSiguiente.click();
		
	}
	
	public static void nuevoCargoValidacionesCR(){
		irAlFramePorDefecto();

		// Hago click en el boton de nuevo
		WebElement btnNuevo =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnNuevo.click();
		
		// Cargo el Presentante en el popUp
		WebElement presentante =  Driver.Instance.findElement(By.id("inputPrimerPresentante"));
		presentante.clear();
		presentante.sendKeys(GestorDeDatosDePrueba.Cargo.getPresentante());

		// Cargo en Solicita una observacion
		WebElement solicita =  Driver.Instance.findElement(By.id("inputText2"));
		solicita.clear();
		solicita.sendKeys(GestorDeDatosDePrueba.Cargo.getSolicita());
		
		Select wSelector = null;
		// selecciono la opcion dentro de "Grupo o clase"
		WebElement grupoClase =  Driver.Instance.findElement(By.id("selectOneChoice21"));
		wSelector = new Select(grupoClase);
		wSelector.selectByVisibleText(GestorDeDatosDePrueba.Cargo.getGrupoClase());

		// Espero a que cargue el combo de "Tipo de Escrito"
		Driver.EsperarDisponible(By.id("selectOneChoice3"));
	
		// Selecciono la opcion dentro de "Tipo de Escrito"
		WebElement tipo = Driver.Instance.findElement(By.id("selectOneChoice3"));
		wSelector = new Select(tipo);
		wSelector.selectByVisibleText(GestorDeDatosDePrueba.Cargo.getTipo());

		// Click en el boton de siguiente
		WebElement btnSiguiente =  Driver.Instance.findElement(By.id("commandButton13"));
		btnSiguiente.click();
		
		//Siguiente página, presiono Finalizar
		Driver.EsperarDisponible(By.id("commandButton2"));
		Driver.Instance.findElement(By.id("commandButton2")).click();
		
	}
	
	public static void nuevoCargoValidacionesExpNuevoParcial() {
		
		irAlFramePorDefecto();
		
		WebElement btnNuevo =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnNuevo.click();
		
		GestorDeCargos.crearExpedienteNuevoPagina1();
		
		GestorDeCargos.crearExpedienteNuevoPagina2();
		
		GestorDeCargos.crearExpedienteNuevoPagina3();
		
	}
	
	public static void nuevoCargoValidacionesExpNuevoActor() {
		
		irAlFramePorDefecto();
		
		WebElement btnNuevo =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnNuevo.click();
		
		GestorDeCargos.crearExpedienteNuevoPagina1();
		
		GestorDeCargos.crearExpedienteNuevoPagina2();
		
		//Pantalla de datos del Actor
		
		Select wSelector = null;
				
		WebElement modo = Driver.Instance.findElement(By.id("form1:selectOneChoice1"));
		wSelector = new Select(modo);
		wSelector.selectByVisibleText(GestorDeDatosDePrueba.Cargo.getModo());
		
		WebElement materia = Driver.Instance.findElement(By.id("form1:selectOneChoice2"));
		wSelector = new Select(materia);
		wSelector.selectByVisibleText(GestorDeDatosDePrueba.Cargo.getMateria());
		
		WebElement vinculo = Driver.Instance.findElement(By.id("form1:selectOneChoice4"));
		wSelector = new Select(vinculo);
		wSelector.selectByVisibleText(GestorDeDatosDePrueba.Cargo.getVinculo());
				
		Driver.Instance.findElement(By.id("form1:commandButton31")).click();
		
	}
	
	
	public static void nuevoCargoValidacionesExpNuevo() {
		
		irAlFramePorDefecto();
		
		WebElement btnNuevo =  Driver.Instance.findElement(By.id("form2:menuBar1:commandButton1"));
		btnNuevo.click();
		
		GestorDeCargos.crearExpedienteNuevoPagina1();
		
		GestorDeCargos.crearExpedienteNuevoPagina2();
		
		GestorDeCargos.crearExpedienteNuevoPagina3();
		
		GestorDeCargos.crearExpedienteNuevoPagina4();
		
}

	public static void consultaCargosCabecera() {
		irAlFramePorDefecto();
		
		WebElement numero =  Driver.Instance.findElement(By.id("form2:inputText1"));
		numero.clear();
		numero.sendKeys(GestorDeDatosDePrueba.Cargo.getNumero());
		
		WebElement anio =  Driver.Instance.findElement(By.id("form2:inputText11"));
		anio.clear();
		anio.sendKeys(GestorDeDatosDePrueba.Cargo.getAnio());
		
		WebElement fechaDesde =  Driver.Instance.findElement(By.id("form2:selectInputDate1"));
		fechaDesde.clear();
		fechaDesde.sendKeys(GestorDeDatosDePrueba.Cargo.getFechaDesde());
	
		WebElement fechaHasta =  Driver.Instance.findElement(By.id("form2:selectInputDate11"));
		fechaHasta.clear();
		fechaHasta.sendKeys(GestorDeDatosDePrueba.Cargo.getFechaHasta());
		
		WebElement lnkBuscar =  Driver.Instance.findElement(By.id("form2:commandLink1"));
		lnkBuscar.click();
		
		GestorDeDatosTestigo.agregarTextoDatosTestigo("Número", GestorDeDatosDePrueba.Cargo.getNumero());
		GestorDeDatosTestigo.agregarTextoDatosTestigo("Año", GestorDeDatosDePrueba.Cargo.getAnio());
		GestorDeDatosTestigo.agregarTextoDatosTestigo("Fecha Desde", GestorDeDatosDePrueba.Cargo.getFechaDesde());
		GestorDeDatosTestigo.agregarTextoDatosTestigo("Fecha Hasta", GestorDeDatosDePrueba.Cargo.getFechaHasta());

	}
	
	public static void iniciarExpedienteMEU_SinGrabar() {
		irAlFramePorDefecto();
		
		//Pantalla Listado de Expedientes
		//Precondición que exista un expediente qué iniciar
		
		WebElement iniciar = Driver.Instance.findElement(By.id("form2:table1:menuBar2:commandButton2"));
		iniciar.click();
		
		Driver.EsperarDisponible(By.id("form111:menuBar11:commandButton112"));
		
		WebElement hora = Driver.Instance.findElement(By.id("form111:inputText11"));
		hora.clear();
		hora.sendKeys(GestorDeDatosDePrueba.Cargo.getHora());
		
		WebElement monto = Driver.Instance.findElement(By.id("form111:inputText1"));
		monto.clear();
		monto.sendKeys(GestorDeDatosDePrueba.Cargo.getMonto());
		
		WebElement fojas = Driver.Instance.findElement(By.id("form111:inputText31"));
		fojas.clear();
		fojas.sendKeys(GestorDeDatosDePrueba.Cargo.getFojas());

		WebElement guardar = Driver.Instance.findElement(By.id("form111:menuBar11:commandButton112"));
		guardar.click();
			
	}

	public static void IniciarExpedienteMEULibroCerrado() {
		irAlFramePorDefecto();
		
		WebElement iniciar = Driver.Instance.findElement(By.id("form2:table1:menuBar2:commandButton2"));
		iniciar.click();
		
	}

	public static boolean verificarCrearCargoHoraPosterior() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(horaPosterior))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "Controla correctamente que el cargo creado no tenga hora posterior a la actual.");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "No controla correctamente que el cargo creado no tenga hora posterior a la actual.");
		
		return blnVerificado;
	}
	
	public static boolean verificarCrearCargoHoraAnterior() {
		boolean blnVerificado = false;
		
		irAlFramePorDefecto();
		
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(horaAnterior))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "Controla correctamente que el cargo creado sea posterior a la apertura del Libro.");
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Libro de Cargos - ", "No controla correctamente que el cargo creado sea posterior a la apertura del Libro.");
		
		return blnVerificado;
	}

	public static boolean verificaModificarCargoObservacionesObligatorio() {
		boolean blnVerificado = false;
		
      	irAlFramePorDefecto();
      	
      	// No encuentra classname x3z. Lo busco con el cssSelctor que se puede copuiar con el F12 del navegador.
		if (Driver.Instance.findElement(By.cssSelector("#tableLayout2111 > tbody > tr:nth-child(3) > td:nth-child(2) > span")).getText().
				contains(faltaIntroducirValor))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Modificar Cargo - ", Driver.Instance.findElement(By.cssSelector("#tableLayout2111 > tbody > tr:nth-child(3) > td:nth-child(2) > span")).getText());
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Modificar Cargo - ", "No valida correctamente la obligatoriedad del campo Observaciones al modificar un cargo.");
		
		return blnVerificado;
	}

	
	public static void eliminarCargoObservacionesObligatorio() {
		irAlFramePorDefecto();
		
		WebElement fechaDesde =  Driver.Instance.findElement(By.id("form2:selectInputDate1"));
		fechaDesde.clear();
		fechaDesde.sendKeys(GestorDeDatosDePrueba.Cargo.getFechaDesde());
	
		WebElement fechaHasta =  Driver.Instance.findElement(By.id("form2:selectInputDate11"));
		fechaHasta.clear();
		fechaHasta.sendKeys(GestorDeDatosDePrueba.Cargo.getFechaHasta());
		
						
		//Link Buscar
		Driver.Instance.findElement(By.id("form2:commandLink1")).click();
		
		//Botón Eliminar
		Driver.EsperarDisponible(By.id("form2:table1:menuBar2:commandButton3"));
		Driver.Instance.findElement(By.id("form2:table1:menuBar2:commandButton3")).click();
		
		//Observaciones
		Driver.EsperarDisponible(By.id("form111:inputText1"));
		Driver.Instance.findElement(By.id("form111:inputText1")).clear();
		Driver.Instance.findElement(By.id("form111:inputText1"))
		.sendKeys(GestorDeDatosDePrueba.Cargo.getObservaciones());
		
		GestorDeDatosTestigo.agregarTextoDatosTestigo("Observaciones"
				, GestorDeDatosDePrueba.Cargo.getObservaciones().trim().toString());
	
		//Botón Aceptar
		Driver.Instance.findElement(By.id("form111:commandButton2")).click();
		
		//Dialogo de confirmación
		irAlDialogo();
		Dialogo.accept();
		volverDelDialogo();
		
	}
		
	
	public static boolean verificaEliminarCargoObservacionesObligatorio() {
		boolean blnVerificado = false;
		
      	irAlFramePorDefecto();
      	
      	
		if (Driver.Instance.findElement(By.className("x9c")).getText().contains(observacionesObligatorio))
		{
			blnVerificado = true;
			GestorDeDatosTestigo.agregarTextoDatosTestigo("Eliminar Cargo - ", Driver.Instance.findElement(By.className("x9c")).getText());
		} else GestorDeDatosTestigo.agregarTextoDatosTestigo("Eliminar Cargo - ", "No valida correctamente la obligatoriedad del campo Observaciones al eliminar un cargo.");
		
		return blnVerificado;
	}


}
