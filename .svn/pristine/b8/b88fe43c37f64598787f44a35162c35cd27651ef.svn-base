package com.indra.pjsf.pruebas;

import org.junit.Assert;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba.entidades;
import com.indra.pjsf.tf.paginas.PgnCambioDeRadicacion;
import com.indra.pjsf.tf.paginas.PgnDevolucion;
import com.indra.pjsf.tf.paginas.PgnElevarACamaraDeApelacion;
import com.indra.pjsf.tf.paginas.PgnMovimientoInterno;
import com.indra.pjsf.tf.paginas.PgnPaseAOtroOrganismo;
import com.indra.pjsf.tf.paginas.PgnPrestamoProfesional;
import org.junit.Test;
import org.junit.Ignore;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class ExpedientesLotesTest extends TestBase {
	
	@Test
	public void B_GE_003_001_Movimiento_InternoLOTE(){
		
		codigo = "GE-003.001";
		prepararDatos(entidades.Expedientes); 
				
		PgnMovimientoInterno.Ir();
		//PgnMovimientoInterno.IrDesdePrincipal(); //Tempo por prueba unitaria
		PgnMovimientoInterno.nuevoMovimientoInternoLOTE();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnMovimientoInterno.verificarMovimientoRealizado());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
	}
	
	
	// Hay dos pruebas GE.003.002 para diferentes versiones. Siempre tener una a Test y la otra a Ignore.
	
	// Prueba para version de Prestamo Profesional en LOTE anterior a 4.1.7
	@Test
	public void A_GE_003_002_Prestamo_ProfesionalLOTE(){
		
		codigo = "GE-003.002";
		prepararDatos(entidades.Expedientes); 
		
		PgnPrestamoProfesional.IrDesdePrincipal();
		//PgnPrestamoProfesional.Ir();
		PgnPrestamoProfesional.nuevoPrestamoProfesionalLOTE();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnPrestamoProfesional.verificarPrestamoProfesional());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

	// Prueba para nueva version de Prestamo Profesional en LOTE desplegada en 4.1.7
	@Ignore
	public void A_GE_003_002B_Prestamo_ProfesionalLOTE_nuevaversion(){
		
		codigo = "GE-003.002B";
		prepararDatos(entidades.Expedientes); 
		
		PgnPrestamoProfesional.IrDesdePrincipalNueva(); 
		PgnPrestamoProfesional.nuevoPrestamoProfesionalLOTE_nuevaversion();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnPrestamoProfesional.verificarPrestamoProfesional());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

	
	@Test
	public void B_GE_003_003_PaseAOtroOrganismoLOTE(){
		
		codigo = "GE-003.003";
		prepararDatos(entidades.Expedientes); 
		
			PgnPaseAOtroOrganismo.Ir();
			//PgnPaseAOtroOrganismo.IrDesdePrincipal(); //Tempo por prueba unitaria
			PgnPaseAOtroOrganismo.nuevoPaseAOtroOrganismoLOTE();
			
		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnPaseAOtroOrganismo.verificarPaseAOtroOrganismo());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}
	
	@Test
	public void C_GE_003_004_CambioDeRadicacionLOTE(){
		
		codigo = "GE-003.004";
		prepararDatos(entidades.Expedientes); 
		
		PgnCambioDeRadicacion.Ir();
		//PgnCambioDeRadicacion.IrDesdePrincipal(); //Tempo por prueba unitaria
		PgnCambioDeRadicacion.nuevoCambioDeRadicacionLOTE();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnCambioDeRadicacion.verificarCambioDeRadicacion());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}
	
	
	@Test
	public void B_GE_003_005_DevolucionLOTE(){
		
		codigo = "GE-003.005";
		prepararDatos(entidades.Expedientes); 
		
		PgnDevolucion.Ir();
		//PgnDevolucion.IrDesdePrincipal(); //Tempo por prueba unitaria
		PgnDevolucion.nuevaDevolucionLOTE();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnDevolucion.verificarDevolucion());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}
	
	@Test
	public void C_GE_003_006_ElevarACamaraLOTE(){
		
		codigo = "GE-003.006";
		prepararDatos(entidades.Expedientes); 
		
		PgnElevarACamaraDeApelacion.Ir();
		//PgnElevarACamaraDeApelacion.IrDesdePrincipal(); //Tempo por prueba unitaria
		PgnElevarACamaraDeApelacion.nuevaElevacionACamaraLOTE();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					PgnElevarACamaraDeApelacion.verificarElevacionACamara());
			resultado = true;
			
		}  catch(Exception e){
			resultado = false;
		} 
		
	}	
}
