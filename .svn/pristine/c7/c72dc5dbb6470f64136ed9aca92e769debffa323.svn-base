package com.indra.pjsf.pruebas;

import org.junit.Assert;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;


import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba;
import com.indra.pjsf.tf.datos.GestorDeDatosDePrueba.entidades;
import com.indra.pjsf.tf.paginas.MESA_PgnPrestamoProfesional;
import com.indra.pjsf.tf.paginas.MESA_PgnCambioDeRadicacion;
import com.indra.pjsf.tf.paginas.MESA_PgnFichaExpediente;
import com.indra.pjsf.tf.paginas.MESA_PgnMovimientoInterno;
import com.indra.pjsf.tf.paginas.MESA_PgnPaseAOtroOrganismo;
import com.indra.pjsf.tf.workflows.MESA_GestorBase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class MESA_ExpedientesAgrupados extends MESA_TestBase {

	
	@Test
	public void A_ME_003_030_Prestamo_Profesional_Con_Acumulado(){
		
		codigo = "ME-003.030";
		prepararDatos(entidades.Expedientes); 
		
		MESA_PgnPrestamoProfesional.IrDesdePrincipal();
		//MESA_PgnPrestamoProfesional.Ir();
		MESA_PgnPrestamoProfesional.PrestamoProfesionalConAcumulado();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					MESA_PgnPrestamoProfesional.verificarPrestamoProfesionalConAcumulado());
			resultado = true;
			// Eliminar movimientos de ambos expedientes
			MESA_PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getSegundoCUIJ());
			MESA_PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getCUIJ());
									
		}  catch(Exception e){
			resultado = false;
		} 
		
	}
	
	
	@Test
	public void A_ME_003_031_Prestamo_Profesional_De_Acumulado(){
		
		codigo = "ME-003.031";
		prepararDatos(entidades.Expedientes); 
		
		//MESA_PgnPrestamoProfesional.IrDesdePrincipal();
		MESA_PgnPrestamoProfesional.Ir();
		MESA_PgnPrestamoProfesional.PrestamoProfesionalDeAcumulado();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					MESA_PgnPrestamoProfesional.verificarPrestamoProfesionalDeAcumulado());
			resultado = true;
			// Eliminar movimientos de ambos expedientes
			MESA_PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getSegundoCUIJ());
			MESA_PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getCUIJ());
												
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

	
	@Test
	public void A_ME_003_032_Movimiento_Interno_Con_Cuerda(){
		
		codigo = "ME-003.032";
		prepararDatos(entidades.Expedientes); 
		
		//MESA_PgnMovimientoInterno.IrDesdePrincipal();
		MESA_PgnMovimientoInterno.Ir();
		MESA_PgnMovimientoInterno.MoviminentoInternoConCuerda();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					MESA_PgnMovimientoInterno.verificarMovimientoInternoConCuerda());
			resultado = true;
			// Eliminar movimientos de ambos expedientes
			MESA_PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getCUIJ());
			MESA_PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getSegundoCUIJ());
									
		}  catch(Exception e){
			resultado = false;
		} 
		
	}


	@Test
	public void A_ME_003_033_Pase_A_Otro_Organismo_Con_Dependendientes(){
		
		codigo = "ME-003.033";
		prepararDatos(entidades.Expedientes); 
		
		//MESA_PgnPaseAOtroOrganismo.IrDesdePrincipal();
		MESA_PgnPaseAOtroOrganismo.Ir();
		MESA_PgnPaseAOtroOrganismo.PaseConDependientes();

		try {
			Assert.assertTrue(mensaje + msjResultado.ERROR.toString(),
					MESA_PgnPaseAOtroOrganismo.verificarPaseConDependientes());
			resultado = true;
			// Eliminar movimientos 
			MESA_PgnFichaExpediente.anulaUltimoMovimientoNumeroAnio(GestorDeDatosDePrueba.Expediente.getNumeroAnio());
			MESA_PgnFichaExpediente.anulaUltimoMovimientoCUIJ(GestorDeDatosDePrueba.Expediente.getSegundoCUIJ());
									
		}  catch(Exception e){
			resultado = false;
		} 
		
	}

	
	
}
